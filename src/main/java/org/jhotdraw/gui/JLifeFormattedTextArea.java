/*
 * @(#)JLifeFormattedTextArea.java
 * 
 * Copyright (c) 2009-2010 by the original authors of JHotDraw and all its
 * contributors. All rights reserved.
 * 
 * You may not use, copy or modify this file, except in compliance with the 
 * license agreement you entered into with the copyright holders. For details
 * see accompanying license terms.
 */
package org.jhotdraw.gui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JFormattedTextField;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * JLifeFormattedTextArea.
 *
 * @author Werner Randelshofer
 * @version $Id$
 */
public class JLifeFormattedTextArea extends JTextArea {

    private JLifeFormattedTextAreaProduct jLifeFormattedTextAreaProduct = new JLifeFormattedTextAreaProduct();
	/**
     * Forwards property change events from the formattedTextFieldAdapter to
     * listeners of this object.
     */
    private PropertyChangeListener handler;

    /** Creates new instance. */
    public JLifeFormattedTextArea() {
    }

    @Override
    public void setDocument(Document newValue) {
        super.setDocument(newValue);

        formattedTextFieldAdapter(newValue);
    }

	private void formattedTextFieldAdapter(Document newValue) {
		if (jLifeFormattedTextAreaProduct.getFormattedTextFieldAdapter() == null) {
			jLifeFormattedTextAreaProduct.setFormattedTextFieldAdapter(new JLifeFormattedTextField());
			handler = new PropertyChangeListener() {
				@Override
				public void propertyChange(PropertyChangeEvent evt) {
					if (evt.getSource() == jLifeFormattedTextAreaProduct.getFormattedTextFieldAdapter() && evt.getPropertyName() == "value") {
						firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
					}
				}
			};
			jLifeFormattedTextAreaProduct.getFormattedTextFieldAdapter().addPropertyChangeListener(handler);
		}
		jLifeFormattedTextAreaProduct.getFormattedTextFieldAdapter().setDocument(newValue);
	}

    public void setValue(Object value) {
        jLifeFormattedTextAreaProduct.getFormattedTextFieldAdapter().setValue(value);
    }

    public Object getValue() {
        return jLifeFormattedTextAreaProduct.getFormattedTextFieldAdapter().getValue();
    }

    public void setFormatterFactory(JFormattedTextField.AbstractFormatterFactory newValue) {
        jLifeFormattedTextAreaProduct.setFormatterFactory(newValue);
    }

    public JFormattedTextField.AbstractFormatterFactory getFormatterFactory() {
        return jLifeFormattedTextAreaProduct.getFormatterFactory();
    }

    /**

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
